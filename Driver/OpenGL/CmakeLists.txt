cmake_minimum_required(VERSION 3.19)
cmake_policy(SET CMP0074 NEW)
project(OCRA-Implementation LANGUAGES CXX)

include(FetchContent)
include(../../cmake-tools/add_subdirectory_with_folder.cmake)
include(../../cmake-tools/GroupSources.cmake)

# Fetch GLEW
FetchContent_Declare(
  GLEW
  GIT_REPOSITORY  https://github.com/Perlmint/glew-cmake.git
  GIT_TAG         glew-cmake-2.2.0
)
option(ONLY_LIBS "Do not build executables" ON)
option(glew-cmake_BUILD_STATIC "Build the static glew library" ON)
option(glew-cmake_BUILD_SHARED "Build the shared glew library" OFF)
FetchContent_MakeAvailable(GLEW)
add_library(GLEW::glew_s ALIAS libglew_static)
add_library(GLEW::GLEW ALIAS libglew_static)
set(GLEW_FOUND 1)
set(GLEW_INCLUDE_DIR ${glew_SOURCE_DIR}/include)
set(GLEW_LIBRARIES GLEW::glew GLEW::glew_s)
set_subdirectory_folder("3rdparty/GLEW" ${glew_SOURCE_DIR})
# Fetch GLEW

set(OCRA_IMPL_HEADER_FILES
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Buffer.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Device.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Memory.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Instance.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/ObjectPool.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/PhysicalDevice.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/RenderPass.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Surface.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/SwapChain.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/WeakHandle.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Command/Buffer.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Command/ExecutionState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Command/Pool.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Common/Blend.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Common/Compare.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Common/IndexType.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Common/Logic.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Common/Stencil.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Common/VertexType.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Image/Format.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Image/Image.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Image/View.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Queue/Fence.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Queue/Queue.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Queue/Semaphore.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Pipeline/ColorBlendState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Pipeline/DepthStencilState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Pipeline/MultisampleState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Pipeline/Pipeline.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Pipeline/RasterizationState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Pipeline/ShaderPipelineState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Pipeline/TessellationState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Pipeline/VertexInputState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Pipeline/ViewPortState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Shader/Stage.hpp
)

set(OCRA_IMPL_SOURCE_FILES
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Buffer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Device.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/FrameBuffer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Instance.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Memory.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/RenderPass.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/PhysicalDevice.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/QueryPool.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/SwapChain.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Queue/Fence.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Queue/Queue.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Queue/Semaphore.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Command/Buffer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Command/Draw.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Command/MemoryBarrier.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Command/Pool.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Command/Query.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Command/Scissor.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Command/ViewPort.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Image/Image.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Image/View.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Pipeline/Graphics.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Pipeline/ShaderPipelineState.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Pipeline/VertexInputState.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Pipeline/Pipeline.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Shader/Stage.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Shader/Module.cpp
)

if (WIN32)
  set(OCRA_IMPL_HEADER_FILES ${OCRA_IMPL_HEADER_FILES}
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/Error.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/D3DContainerInterface.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/D3D10Container.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/D3D11Container.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/DXGIFormat.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/WGLDXMapping.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/Instance.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/OpenGL.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/PhysicalDevice.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/Surface.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/SwapChain.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/include/GL/Win32/Window.hpp
  )
  set(OCRA_IMPL_SOURCE_FILES ${OCRA_IMPL_SOURCE_FILES}
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Win32/Error.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Win32/Instance.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Win32/OpenGL.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Win32/PhysicalDevice.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Win32/Surface.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Win32/SwapChain.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Win32/Window.cpp
  )
endif(WIN32)

add_library(OCRA-Implementation ${OCRA_IMPL_SOURCE_FILES} ${OCRA_IMPL_HEADER_FILES})
target_include_directories(OCRA-Implementation PRIVATE
  "${CMAKE_CURRENT_SOURCE_DIR}/include"
  "${CMAKE_CURRENT_SOURCE_DIR}/../../include"
)
add_library(OCRA::Implementation ALIAS OCRA-Implementation)

if (WIN32)
  option(USE_D3D11 "Use D3D11 for the SwapChain emulation" ON)
  if (USE_D3D11)
    find_library(D3D11_LIBRARY
      NAMES d3d11.lib
      PATHS "$ENV{DXSDK_DIR}/Lib/x64"
      DOC   "Where the D3D11 library resides"
    )
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_D3D11")
    target_link_libraries(OCRA-Implementation PUBLIC GLEW::GLEW ${D3D11_LIBRARY})
  else (USE_D3D11)
    find_library(D3D10_LIBRARY
        NAMES d3d10.lib
        PATHS "$ENV{DXSDK_DIR}/Lib/x64"
        DOC   "Where the D3D10 library resides"
      )
    target_link_libraries(OCRA-Implementation PUBLIC GLEW::GLEW ${D3D10_LIBRARY})
  endif(USE_D3D11)
endif (WIN32)

if (MSVC_IDE)
  set(CMAKE_DEBUG_POSTFIX "d")
  # Run macro
  GroupSources(src)
  GroupSources(include)
endif ()