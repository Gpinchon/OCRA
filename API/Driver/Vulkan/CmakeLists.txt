cmake_minimum_required(VERSION 3.19)
cmake_policy(SET CMP0074 NEW)
project(OCRA-API-Implementation LANGUAGES CXX)

set(OCRA_IMPL_INCLUDE_DIR
  ${CMAKE_CURRENT_SOURCE_DIR}/include
  CACHE INTERNAL ""
)

find_package(Vulkan)

if (NOT Vulkan_FOUND)
  message("Vulkan SDK not installed, fetching minimal dependencies")
  option(UPDATE_DEPS "Run update_deps.py for user" OFF)

  Fetch_VulkanValidationLayers()
  Fetch_VulkanLoader()

  set(VK_LIBS vulkan Vulkan::Headers)
else (NOT Vulkan_FOUND)
  set(VK_LIBS Vulkan::Vulkan)
endif (NOT Vulkan_FOUND)

set(OCRA_IMPL_HEADER_FILES
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Assert.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Buffer.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/CommandBuffer.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/CommandPool.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/DescriptorPool.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/DescriptorSet.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/DescriptorSetLayout.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/DescriptorSetLayoutCache.hpp  
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Device.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Enums.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Fence.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Flags.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/GraphicsPipeline.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/GraphicsPipelineStates.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Image.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/ImageSampler.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/ImageView.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Instance.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/LazyConstructor.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Memory.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Pipeline.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/PipelineLayout.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/PipelineLayoutCache.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/PhysicalDevice.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Queue.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Semaphore.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/ShaderModule.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Structs.hpp
)

set(OCRA_IMPL_SOURCE_FILES
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Buffer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/CommandBuffer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/CommandPool.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Commands.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/DescriptorPool.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/DescriptorSet.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/DescriptorSetLayout.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Device.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Fence.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Image.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/ImageView.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Instance.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Memory.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/PhysicalDevice.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Queue.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Semaphore.cpp
)

if (WIN32)
  set(OCRA_IMPL_HEADER_FILES ${OCRA_IMPL_HEADER_FILES}
  )
  set(OCRA_IMPL_SOURCE_FILES ${OCRA_IMPL_SOURCE_FILES}
  )
endif(WIN32)

add_library(OCRA-API-Implementation ${OCRA_IMPL_SOURCE_FILES} ${OCRA_IMPL_HEADER_FILES})
add_library(OCRA::API::Implementation ALIAS OCRA-API-Implementation)
target_include_directories(OCRA-API-Implementation PRIVATE
  ${OCRA_IMPL_INCLUDE_DIR}
)
set_target_properties(
  OCRA-API-Implementation
  PROPERTIES FOLDER "API"
)

target_link_libraries(OCRA-API-Implementation PUBLIC
  OCRA::API::Interface
  ${VK_LIBS}
)

if (MSVC_IDE)
  set(CMAKE_DEBUG_POSTFIX "d")
  # Run macro
  GroupSources(src)
  GroupSources(include)
endif ()