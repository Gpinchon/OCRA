cmake_minimum_required(VERSION 3.19)
cmake_policy(SET CMP0074 NEW)
project(OCRA-API-Implementation LANGUAGES CXX)

set(OCRA_IMPL_INCLUDE_DIR
  ${CMAKE_CURRENT_SOURCE_DIR}/include
  CACHE INTERNAL ""
)

find_package(Vulkan)

if (NOT Vulkan_FOUND)
  message("Vulkan SDK not installed, fetching minimal dependencies")

  option(UPDATE_DEPS "Run update_deps.py for user" OFF)

  #Fetch Vulkan-Headers
  FetchContent_Declare(
    VK_HEADERS
    GIT_REPOSITORY  https://github.com/KhronosGroup/Vulkan-Headers.git
    GIT_TAG         v1.3.244
  )
  if (NOT vk_headers_POPULATED)
    FetchContent_Populate(VK_HEADERS)
  endif (NOT vk_headers_POPULATED)
  execute_process(COMMAND cmake -S ${vk_headers_SOURCE_DIR} -B ${vk_headers_BINARY_DIR})
  execute_process(COMMAND cmake --install ${vk_headers_BINARY_DIR} --prefix ${vk_headers_BINARY_DIR}/install)
  list(APPEND CMAKE_PREFIX_PATH ${vk_headers_BINARY_DIR}/install/)
  find_package(VulkanHeaders REQUIRED CONFIG QUIET)
  message("Vulkan-Headers fetched to ${vk_headers_SOURCE_DIR}")

  #Fetch Vulkan-Loader
  FetchContent_Declare(
    VK_LOADER
    GIT_REPOSITORY  https://github.com/KhronosGroup/Vulkan-Loader.git
    GIT_TAG         v1.3.244
  )
  FetchContent_MakeAvailable(VK_LOADER)
  set_subdirectory_folder("3rdparty/Vulkan-Loader" ${vk_loader_SOURCE_DIR})
  message("Vulkan-Loader fetched to ${vk_loader_SOURCE_DIR}")

  #Fetch SPIRV-Headers
  FetchContent_Declare(
    SPIRV_HEADERS
    GIT_REPOSITORY  https://github.com/KhronosGroup/SPIRV-Headers.git
    GIT_TAG         main
  )
  if (NOT spirv_headers_POPULATED)
    FetchContent_Populate(SPIRV_HEADERS)
  endif (NOT spirv_headers_POPULATED)
  execute_process(COMMAND cmake -S ${spirv_headers_SOURCE_DIR} -B ${spirv_headers_BINARY_DIR})
  execute_process(COMMAND cmake --install ${spirv_headers_BINARY_DIR} --config Release --prefix ${spirv_headers_BINARY_DIR}/install)
  list(APPEND CMAKE_PREFIX_PATH ${spirv_headers_BINARY_DIR}/install/)
  find_package(SPIRV-Headers REQUIRED CONFIG QUIET)
  message("SPV-Headers fetched to ${spirv_headers_SOURCE_DIR}")

  #Fetch SPV-Tools
  FetchContent_Declare(
    SPIRV_TOOLS
    GIT_REPOSITORY  https://github.com/KhronosGroup/SPIRV-Tools.git
    GIT_TAG         v2023.1
  )
  if (NOT spirv_tools_POPULATED)
    FetchContent_Populate(SPIRV_TOOLS)
  endif (NOT spirv_tools_POPULATED)
  execute_process(COMMAND cmake -D SPIRV-Headers_SOURCE_DIR=${spirv_headers_SOURCE_DIR} -S ${spirv_tools_SOURCE_DIR} -B ${spirv_tools_BINARY_DIR})
  execute_process(COMMAND cmake --build ${spirv_tools_BINARY_DIR} --config Release)
  execute_process(COMMAND cmake --install ${spirv_tools_BINARY_DIR} --config Release --prefix ${spirv_tools_BINARY_DIR}/install)
  list(APPEND CMAKE_PREFIX_PATH ${spirv_tools_BINARY_DIR}/install/)
  find_package(SPIRV-Tools REQUIRED CONFIG QUIET)
  message("SPV-Tools fetched to ${spirv_tools_SOURCE_DIR}")

  #Fetch Vulkan-ValidationLayers
  FetchContent_Declare(
    VK_LAYERS
    GIT_REPOSITORY  https://github.com/KhronosGroup/Vulkan-ValidationLayers.git
    GIT_TAG         v1.3.244
  )
  if (NOT vk_layers_POPULATED)
    FetchContent_Populate(VK_LAYERS)
  endif (NOT vk_layers_POPULATED)
  execute_process(COMMAND cmake "-DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}" -S ${vk_layers_SOURCE_DIR} -B ${vk_layers_BINARY_DIR})
  execute_process(COMMAND cmake --build ${vk_layers_BINARY_DIR} --config Release)
  execute_process(COMMAND cmake --install ${vk_layers_BINARY_DIR} --config Release --prefix ${vk_layers_BINARY_DIR}/install)
  message("Vulkan-ValidationLayers fetched to ${vk_layers_SOURCE_DIR}")

  set(OCRA_DEBUGGER_ENV "VK_LAYER_PATH=${vk_layers_BINARY_DIR}/install/bin" CACHE STRING "The debugging environment")

  set(VK_LIBS vulkan Vulkan::Headers)
else (NOT Vulkan_FOUND)
  set(VK_LIBS Vulkan::Vulkan)
endif (NOT Vulkan_FOUND)

set(OCRA_IMPL_HEADER_FILES
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Assert.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Buffer.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/CommandBuffer.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/CommandPool.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/DescriptorPool.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/DescriptorSet.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/DescriptorSetLayout.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Device.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Enums.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Fence.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Flags.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/GraphicsPipeline.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/GraphicsPipelineStates.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Image.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/ImageSampler.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/ImageView.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Instance.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Memory.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Pipeline.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/PipelineLayout.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/PhysicalDevice.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Queue.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Semaphore.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/ShaderModule.hpp
  ${OCRA_IMPL_INCLUDE_DIR}/VK/Structs.hpp
)

set(OCRA_IMPL_SOURCE_FILES
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Buffer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/CommandBuffer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/CommandPool.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Commands.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/DescriptorPool.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/DescriptorSet.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/DescriptorSetLayout.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Device.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Fence.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Image.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/ImageView.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Instance.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Memory.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/PhysicalDevice.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Queue.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Semaphore.cpp
)

if (WIN32)
  set(OCRA_IMPL_HEADER_FILES ${OCRA_IMPL_HEADER_FILES}
  )
  set(OCRA_IMPL_SOURCE_FILES ${OCRA_IMPL_SOURCE_FILES}
  )
endif(WIN32)

add_library(OCRA-API-Implementation ${OCRA_IMPL_SOURCE_FILES} ${OCRA_IMPL_HEADER_FILES})
add_library(OCRA::API::Implementation ALIAS OCRA-API-Implementation)
target_include_directories(OCRA-API-Implementation PRIVATE
  ${OCRA_IMPL_INCLUDE_DIR}
)
set_target_properties(
  OCRA-API-Implementation
  PROPERTIES FOLDER "API"
)

target_link_libraries(OCRA-API-Implementation PUBLIC
  OCRA::API::Interface
  ${VK_LIBS}
)

if (MSVC_IDE)
  set(CMAKE_DEBUG_POSTFIX "d")
  # Run macro
  GroupSources(src)
  GroupSources(include)
endif ()