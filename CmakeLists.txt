cmake_minimum_required(VERSION 3.10)
cmake_policy(SET CMP0074 NEW)

project(OCRA LANGUAGES CXX)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(CMAKE_CXX_STANDARD 17)

include(FetchContent)

FetchContent_Declare(
  GLEW
  GIT_REPOSITORY  https://github.com/Perlmint/glew-cmake.git
  GIT_TAG     glew-cmake-2.2.0
)

FetchContent_GetProperties(GLEW)
if(NOT GLEW_POPULATED)
  FetchContent_Populate(GLEW)
  message(STATUS "Fetched GLEW to ${glew_SOURCE_DIR}")
  option(ONLY_LIBS "Do not build executables" ON)
  option(glew-cmake_BUILD_STATIC "Build the static glew library" ON)
  option(glew-cmake_BUILD_SHARED "Build the shared glew library" OFF)
  add_subdirectory(${glew_SOURCE_DIR} ${glew_BINARY_DIR})
  add_library(GLEW::glew_s ALIAS libglew_static)
  add_library(GLEW::GLEW ALIAS libglew_static)
  set_target_properties(libglew_static PROPERTIES FOLDER "3rdparty")
  set(GLEW_FOUND 1)
  set(GLEW_INCLUDE_DIR ${glew_SOURCE_DIR}/include)
  set(GLEW_LIBRARIES GLEW::glew GLEW::glew_s)
endif()

#[[Rendering API]]
set(RenderingAPI "OpenGL" CACHE STRING
  "Rendering API used at compile-time")
set(RenderingAPIValues
  "OpenGL;Vulkan;DirectX")
set_property(CACHE RenderingAPI PROPERTY STRINGS ${RenderingAPIValues})
add_compile_definitions(RENDERINGAPI=${RenderingAPI})

set (CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -DDEBUG_MOD")
set (CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DDEBUG_MOD")
set (CMAKE_CXX_FLAGS_RELEASE "-Ox")

if (RenderingAPI STREQUAL "OpenGL")
set(OCRA_HEADER_FILES ${OCRA_HEADER_FILES}
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Driver/OpenGL/Blend.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Driver/OpenGL/Compare.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Driver/OpenGL/Logic.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Driver/OpenGL/Stencil.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Driver/OpenGL/Pipeline/ShaderStage.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Driver/OpenGL/Pipeline/ColorBlendState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Driver/OpenGL/Pipeline/VertexInputState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Driver/OpenGL/Pipeline/DepthStencilState.hpp
)
set(OCRA_SOURCE_FILES ${OCRA_SOURCE_FILES}
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Driver/OpenGL/Queue.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Driver/OpenGL/ViewPort.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Driver/OpenGL/Buffer/Buffer.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Driver/OpenGL/Buffer/View.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Driver/OpenGL/Image/Image.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Driver/OpenGL/Image/View.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Driver/OpenGL/Pipeline/Graphics.cpp
  ${CMAKE_CURRENT_SOURCE_DIR}/src/Driver/OpenGL/Shader/Module.cpp
)
endif (RenderingAPI STREQUAL "OpenGL")

set(OCRA_HEADER_FILES ${OCRA_HEADER_FILES}
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Blend.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Compare.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Context.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Device.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Extent3D.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/FrameBuffer.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Handle.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Logic.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Pass.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Queue.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Rect2D.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Scalar.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/ScissorTest.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Stencil.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/ViewPort.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Window.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Buffer/Buffer.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Buffer/View.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Descriptor/Descriptor.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Descriptor/Layout/Binding.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Descriptor/Layout/Layout.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Image/Descriptor.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Image/Filter.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Image/Format.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Image/Image.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Image/Sampler.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Image/View.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Pipeline/ColorBlendState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Pipeline/DepthStencilState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Pipeline/Graphics.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Pipeline/InputAssemblyState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Pipeline/MultisampleState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Pipeline/RasterizationState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Pipeline/ShaderStage.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Pipeline/TessellationState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Pipeline/VertexInputState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Pipeline/ViewPortState.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Primitive/Topology.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Shader/Module.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/State/Clear.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/State/Draw.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Vertex/Array.hpp
  ${CMAKE_CURRENT_SOURCE_DIR}/include/Vertex/Elements.hpp
)

add_library(OCRA STATIC ${OCRA_SOURCE_FILES} ${OCRA_HEADER_FILES})

target_include_directories(OCRA PUBLIC
  "${CMAKE_CURRENT_SOURCE_DIR}/include"
)

target_link_libraries(OCRA PUBLIC GLEW::GLEW)

if(MSVC_IDE)
  set(CMAKE_DEBUG_POSTFIX "d")
  # Macro to preserve source files hierarchy in the IDE
  macro(GroupSources curdir)
    file(GLOB children RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}/${curdir} ${CMAKE_CURRENT_SOURCE_DIR}/${curdir}/*)
  
    foreach(child ${children})
      if(IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${curdir}/${child})
        GroupSources(${curdir}/${child})
      else()
        string(REPLACE "/" "\\" groupname ${curdir})
        string(REPLACE "src" "Sources" groupname ${groupname})
        string(REPLACE "include" "Includes" groupname ${groupname})
        #string(REPLACE "shaders" "Shaders" groupname ${groupname})
        source_group(${groupname} FILES ${CMAKE_CURRENT_SOURCE_DIR}/${curdir}/${child})
      endif()
    endforeach()
  endmacro()
  
  # Run macro
  GroupSources(src)
  GroupSources(include)
  #GroupSources(shaders)
endif()
